// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"

	models "github.com/zunkk/go-project-startup/internal/core/model"
)

type UserAuthMod interface {
	Apply(context.Context, *UserAuthTemplate)
}

type UserAuthModFunc func(context.Context, *UserAuthTemplate)

func (f UserAuthModFunc) Apply(ctx context.Context, n *UserAuthTemplate) {
	f(ctx, n)
}

type UserAuthModSlice []UserAuthMod

func (mods UserAuthModSlice) Apply(ctx context.Context, n *UserAuthTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// UserAuthTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UserAuthTemplate struct {
	ID            func() int64
	CreateTime    func() time.Time
	UpdateTime    func() time.Time
	DeleteTime    func() time.Time
	DelState      func() int64
	Version       func() int64
	UserID        func() int64
	AuthType      func() string
	AuthID        func() string
	AuthToken     func() string
	LastLoginTime func() time.Time

	f *Factory
}

// Apply mods to the UserAuthTemplate
func (o *UserAuthTemplate) Apply(ctx context.Context, mods ...UserAuthMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.UserAuth
// according to the relationships in the template. Nothing is inserted into the db
func (t UserAuthTemplate) setModelRels(o *models.UserAuth) {}

// BuildSetter returns an *models.UserAuthSetter
// this does nothing with the relationship templates
func (o UserAuthTemplate) BuildSetter() *models.UserAuthSetter {
	m := &models.UserAuthSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = &val
	}
	if o.CreateTime != nil {
		val := o.CreateTime()
		m.CreateTime = &val
	}
	if o.UpdateTime != nil {
		val := o.UpdateTime()
		m.UpdateTime = &val
	}
	if o.DeleteTime != nil {
		val := o.DeleteTime()
		m.DeleteTime = &val
	}
	if o.DelState != nil {
		val := o.DelState()
		m.DelState = &val
	}
	if o.Version != nil {
		val := o.Version()
		m.Version = &val
	}
	if o.UserID != nil {
		val := o.UserID()
		m.UserID = &val
	}
	if o.AuthType != nil {
		val := o.AuthType()
		m.AuthType = &val
	}
	if o.AuthID != nil {
		val := o.AuthID()
		m.AuthID = &val
	}
	if o.AuthToken != nil {
		val := o.AuthToken()
		m.AuthToken = &val
	}
	if o.LastLoginTime != nil {
		val := o.LastLoginTime()
		m.LastLoginTime = &val
	}

	return m
}

// BuildManySetter returns an []*models.UserAuthSetter
// this does nothing with the relationship templates
func (o UserAuthTemplate) BuildManySetter(number int) []*models.UserAuthSetter {
	m := make([]*models.UserAuthSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.UserAuth
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserAuthTemplate.Create
func (o UserAuthTemplate) Build() *models.UserAuth {
	m := &models.UserAuth{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.CreateTime != nil {
		m.CreateTime = o.CreateTime()
	}
	if o.UpdateTime != nil {
		m.UpdateTime = o.UpdateTime()
	}
	if o.DeleteTime != nil {
		m.DeleteTime = o.DeleteTime()
	}
	if o.DelState != nil {
		m.DelState = o.DelState()
	}
	if o.Version != nil {
		m.Version = o.Version()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.AuthType != nil {
		m.AuthType = o.AuthType()
	}
	if o.AuthID != nil {
		m.AuthID = o.AuthID()
	}
	if o.AuthToken != nil {
		m.AuthToken = o.AuthToken()
	}
	if o.LastLoginTime != nil {
		m.LastLoginTime = o.LastLoginTime()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UserAuthSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserAuthTemplate.CreateMany
func (o UserAuthTemplate) BuildMany(number int) models.UserAuthSlice {
	m := make(models.UserAuthSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUserAuth(m *models.UserAuthSetter) {
	if m.ID == nil {
		val := random_int64(nil)
		m.ID = &val
	}
	if m.CreateTime == nil {
		val := random_time_Time(nil)
		m.CreateTime = &val
	}
	if m.UpdateTime == nil {
		val := random_time_Time(nil)
		m.UpdateTime = &val
	}
	if m.DeleteTime == nil {
		val := random_time_Time(nil)
		m.DeleteTime = &val
	}
	if m.LastLoginTime == nil {
		val := random_time_Time(nil)
		m.LastLoginTime = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.UserAuth
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UserAuthTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.UserAuth) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a userAuth and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UserAuthTemplate) Create(ctx context.Context, exec bob.Executor) (*models.UserAuth, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a userAuth and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *UserAuthTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.UserAuth {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a userAuth and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *UserAuthTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.UserAuth {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a userAuth and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *UserAuthTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.UserAuth, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUserAuth(opt)

	m, err := models.UserAuths.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = userAuthCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple userAuths and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UserAuthTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UserAuthSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple userAuths and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o UserAuthTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.UserAuthSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple userAuths and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o UserAuthTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.UserAuthSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple userAuths and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o UserAuthTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.UserAuthSlice, error) {
	var err error
	m := make(models.UserAuthSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// UserAuth has methods that act as mods for the UserAuthTemplate
var UserAuthMods userAuthMods

type userAuthMods struct{}

func (m userAuthMods) RandomizeAllColumns(f *faker.Faker) UserAuthMod {
	return UserAuthModSlice{
		UserAuthMods.RandomID(f),
		UserAuthMods.RandomCreateTime(f),
		UserAuthMods.RandomUpdateTime(f),
		UserAuthMods.RandomDeleteTime(f),
		UserAuthMods.RandomDelState(f),
		UserAuthMods.RandomVersion(f),
		UserAuthMods.RandomUserID(f),
		UserAuthMods.RandomAuthType(f),
		UserAuthMods.RandomAuthID(f),
		UserAuthMods.RandomAuthToken(f),
		UserAuthMods.RandomLastLoginTime(f),
	}
}

// Set the model columns to this value
func (m userAuthMods) ID(val int64) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m userAuthMods) IDFunc(f func() int64) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m userAuthMods) UnsetID() UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAuthMods) RandomID(f *faker.Faker) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.ID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m userAuthMods) CreateTime(val time.Time) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.CreateTime = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userAuthMods) CreateTimeFunc(f func() time.Time) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.CreateTime = f
	})
}

// Clear any values for the column
func (m userAuthMods) UnsetCreateTime() UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.CreateTime = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAuthMods) RandomCreateTime(f *faker.Faker) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.CreateTime = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m userAuthMods) UpdateTime(val time.Time) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.UpdateTime = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userAuthMods) UpdateTimeFunc(f func() time.Time) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.UpdateTime = f
	})
}

// Clear any values for the column
func (m userAuthMods) UnsetUpdateTime() UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.UpdateTime = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAuthMods) RandomUpdateTime(f *faker.Faker) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.UpdateTime = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m userAuthMods) DeleteTime(val time.Time) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.DeleteTime = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userAuthMods) DeleteTimeFunc(f func() time.Time) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.DeleteTime = f
	})
}

// Clear any values for the column
func (m userAuthMods) UnsetDeleteTime() UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.DeleteTime = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAuthMods) RandomDeleteTime(f *faker.Faker) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.DeleteTime = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m userAuthMods) DelState(val int64) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.DelState = func() int64 { return val }
	})
}

// Set the Column from the function
func (m userAuthMods) DelStateFunc(f func() int64) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.DelState = f
	})
}

// Clear any values for the column
func (m userAuthMods) UnsetDelState() UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.DelState = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAuthMods) RandomDelState(f *faker.Faker) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.DelState = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m userAuthMods) Version(val int64) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.Version = func() int64 { return val }
	})
}

// Set the Column from the function
func (m userAuthMods) VersionFunc(f func() int64) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.Version = f
	})
}

// Clear any values for the column
func (m userAuthMods) UnsetVersion() UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.Version = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAuthMods) RandomVersion(f *faker.Faker) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.Version = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m userAuthMods) UserID(val int64) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.UserID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m userAuthMods) UserIDFunc(f func() int64) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m userAuthMods) UnsetUserID() UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAuthMods) RandomUserID(f *faker.Faker) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.UserID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m userAuthMods) AuthType(val string) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.AuthType = func() string { return val }
	})
}

// Set the Column from the function
func (m userAuthMods) AuthTypeFunc(f func() string) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.AuthType = f
	})
}

// Clear any values for the column
func (m userAuthMods) UnsetAuthType() UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.AuthType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAuthMods) RandomAuthType(f *faker.Faker) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.AuthType = func() string {
			return random_string(f, "20")
		}
	})
}

// Set the model columns to this value
func (m userAuthMods) AuthID(val string) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.AuthID = func() string { return val }
	})
}

// Set the Column from the function
func (m userAuthMods) AuthIDFunc(f func() string) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.AuthID = f
	})
}

// Clear any values for the column
func (m userAuthMods) UnsetAuthID() UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.AuthID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAuthMods) RandomAuthID(f *faker.Faker) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.AuthID = func() string {
			return random_string(f, "64")
		}
	})
}

// Set the model columns to this value
func (m userAuthMods) AuthToken(val string) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.AuthToken = func() string { return val }
	})
}

// Set the Column from the function
func (m userAuthMods) AuthTokenFunc(f func() string) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.AuthToken = f
	})
}

// Clear any values for the column
func (m userAuthMods) UnsetAuthToken() UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.AuthToken = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAuthMods) RandomAuthToken(f *faker.Faker) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.AuthToken = func() string {
			return random_string(f, "255")
		}
	})
}

// Set the model columns to this value
func (m userAuthMods) LastLoginTime(val time.Time) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.LastLoginTime = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userAuthMods) LastLoginTimeFunc(f func() time.Time) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.LastLoginTime = f
	})
}

// Clear any values for the column
func (m userAuthMods) UnsetLastLoginTime() UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.LastLoginTime = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAuthMods) RandomLastLoginTime(f *faker.Faker) UserAuthMod {
	return UserAuthModFunc(func(_ context.Context, o *UserAuthTemplate) {
		o.LastLoginTime = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m userAuthMods) WithParentsCascading() UserAuthMod {
	return UserAuthModFunc(func(ctx context.Context, o *UserAuthTemplate) {
		if isDone, _ := userAuthWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = userAuthWithParentsCascadingCtx.WithValue(ctx, true)
	})
}
