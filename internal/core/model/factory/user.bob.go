// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"

	models "github.com/zunkk/go-project-startup/internal/core/model"
)

type UserMod interface {
	Apply(context.Context, *UserTemplate)
}

type UserModFunc func(context.Context, *UserTemplate)

func (f UserModFunc) Apply(ctx context.Context, n *UserTemplate) {
	f(ctx, n)
}

type UserModSlice []UserMod

func (mods UserModSlice) Apply(ctx context.Context, n *UserTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// UserTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UserTemplate struct {
	ID         func() int64
	CreateTime func() time.Time
	UpdateTime func() time.Time
	DeleteTime func() time.Time
	DelState   func() int64
	Version    func() int64
	Nickname   func() string
	Info       func() string
	Role       func() string

	f *Factory
}

// Apply mods to the UserTemplate
func (o *UserTemplate) Apply(ctx context.Context, mods ...UserMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.User
// according to the relationships in the template. Nothing is inserted into the db
func (t UserTemplate) setModelRels(o *models.User) {}

// BuildSetter returns an *models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildSetter() *models.UserSetter {
	m := &models.UserSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = &val
	}
	if o.CreateTime != nil {
		val := o.CreateTime()
		m.CreateTime = &val
	}
	if o.UpdateTime != nil {
		val := o.UpdateTime()
		m.UpdateTime = &val
	}
	if o.DeleteTime != nil {
		val := o.DeleteTime()
		m.DeleteTime = &val
	}
	if o.DelState != nil {
		val := o.DelState()
		m.DelState = &val
	}
	if o.Version != nil {
		val := o.Version()
		m.Version = &val
	}
	if o.Nickname != nil {
		val := o.Nickname()
		m.Nickname = &val
	}
	if o.Info != nil {
		val := o.Info()
		m.Info = &val
	}
	if o.Role != nil {
		val := o.Role()
		m.Role = &val
	}

	return m
}

// BuildManySetter returns an []*models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildManySetter(number int) []*models.UserSetter {
	m := make([]*models.UserSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.User
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.Create
func (o UserTemplate) Build() *models.User {
	m := &models.User{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.CreateTime != nil {
		m.CreateTime = o.CreateTime()
	}
	if o.UpdateTime != nil {
		m.UpdateTime = o.UpdateTime()
	}
	if o.DeleteTime != nil {
		m.DeleteTime = o.DeleteTime()
	}
	if o.DelState != nil {
		m.DelState = o.DelState()
	}
	if o.Version != nil {
		m.Version = o.Version()
	}
	if o.Nickname != nil {
		m.Nickname = o.Nickname()
	}
	if o.Info != nil {
		m.Info = o.Info()
	}
	if o.Role != nil {
		m.Role = o.Role()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UserSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.CreateMany
func (o UserTemplate) BuildMany(number int) models.UserSlice {
	m := make(models.UserSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUser(m *models.UserSetter) {
	if m.ID == nil {
		val := random_int64(nil)
		m.ID = &val
	}
	if m.CreateTime == nil {
		val := random_time_Time(nil)
		m.CreateTime = &val
	}
	if m.UpdateTime == nil {
		val := random_time_Time(nil)
		m.UpdateTime = &val
	}
	if m.DeleteTime == nil {
		val := random_time_Time(nil)
		m.DeleteTime = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.User
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UserTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.User) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UserTemplate) Create(ctx context.Context, exec bob.Executor) (*models.User, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *UserTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.User {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *UserTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.User {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *UserTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.User, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUser(opt)

	m, err := models.Users.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = userCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UserTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UserSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o UserTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.UserSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o UserTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.UserSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o UserTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.UserSlice, error) {
	var err error
	m := make(models.UserSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// User has methods that act as mods for the UserTemplate
var UserMods userMods

type userMods struct{}

func (m userMods) RandomizeAllColumns(f *faker.Faker) UserMod {
	return UserModSlice{
		UserMods.RandomID(f),
		UserMods.RandomCreateTime(f),
		UserMods.RandomUpdateTime(f),
		UserMods.RandomDeleteTime(f),
		UserMods.RandomDelState(f),
		UserMods.RandomVersion(f),
		UserMods.RandomNickname(f),
		UserMods.RandomInfo(f),
		UserMods.RandomRole(f),
	}
}

// Set the model columns to this value
func (m userMods) ID(val int64) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m userMods) IDFunc(f func() int64) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m userMods) UnsetID() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomID(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) CreateTime(val time.Time) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.CreateTime = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userMods) CreateTimeFunc(f func() time.Time) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.CreateTime = f
	})
}

// Clear any values for the column
func (m userMods) UnsetCreateTime() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.CreateTime = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomCreateTime(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.CreateTime = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) UpdateTime(val time.Time) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.UpdateTime = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userMods) UpdateTimeFunc(f func() time.Time) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.UpdateTime = f
	})
}

// Clear any values for the column
func (m userMods) UnsetUpdateTime() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.UpdateTime = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomUpdateTime(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.UpdateTime = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) DeleteTime(val time.Time) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DeleteTime = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userMods) DeleteTimeFunc(f func() time.Time) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DeleteTime = f
	})
}

// Clear any values for the column
func (m userMods) UnsetDeleteTime() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DeleteTime = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomDeleteTime(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DeleteTime = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) DelState(val int64) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DelState = func() int64 { return val }
	})
}

// Set the Column from the function
func (m userMods) DelStateFunc(f func() int64) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DelState = f
	})
}

// Clear any values for the column
func (m userMods) UnsetDelState() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DelState = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomDelState(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DelState = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Version(val int64) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Version = func() int64 { return val }
	})
}

// Set the Column from the function
func (m userMods) VersionFunc(f func() int64) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Version = f
	})
}

// Clear any values for the column
func (m userMods) UnsetVersion() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Version = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomVersion(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Version = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Nickname(val string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Nickname = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) NicknameFunc(f func() string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Nickname = f
	})
}

// Clear any values for the column
func (m userMods) UnsetNickname() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Nickname = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomNickname(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Nickname = func() string {
			return random_string(f, "255")
		}
	})
}

// Set the model columns to this value
func (m userMods) Info(val string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Info = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) InfoFunc(f func() string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Info = f
	})
}

// Clear any values for the column
func (m userMods) UnsetInfo() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Info = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomInfo(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Info = func() string {
			return random_string(f, "255")
		}
	})
}

// Set the model columns to this value
func (m userMods) Role(val string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Role = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) RoleFunc(f func() string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Role = f
	})
}

// Clear any values for the column
func (m userMods) UnsetRole() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Role = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomRole(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Role = func() string {
			return random_string(f, "20")
		}
	})
}

func (m userMods) WithParentsCascading() UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		if isDone, _ := userWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = userWithParentsCascadingCtx.WithValue(ctx, true)
	})
}
