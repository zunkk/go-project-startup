// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// User is an object representing the database table.
type User struct {
	ID         int64     `db:"id,pk" `
	CreateTime time.Time `db:"create_time" `
	UpdateTime time.Time `db:"update_time" `
	DeleteTime time.Time `db:"delete_time" `
	DelState   int64     `db:"del_state" `
	Version    int64     `db:"version" `
	Nickname   string    `db:"nickname" `
	Info       string    `db:"info" `
	Role       string    `db:"role" `
}

// UserSlice is an alias for a slice of pointers to User.
// This should almost always be used instead of []*User.
type UserSlice []*User

// Users contains methods to work with the user table
var Users = psql.NewTablex[*User, UserSlice, *UserSetter]("", "user")

// UsersQuery is a query on the user table
type UsersQuery = *psql.ViewQuery[*User, UserSlice]

type userColumnNames struct {
	ID         string
	CreateTime string
	UpdateTime string
	DeleteTime string
	DelState   string
	Version    string
	Nickname   string
	Info       string
	Role       string
}

var UserColumns = buildUserColumns("user")

type userColumns struct {
	tableAlias string
	ID         psql.Expression
	CreateTime psql.Expression
	UpdateTime psql.Expression
	DeleteTime psql.Expression
	DelState   psql.Expression
	Version    psql.Expression
	Nickname   psql.Expression
	Info       psql.Expression
	Role       psql.Expression
}

func (c userColumns) Alias() string {
	return c.tableAlias
}

func (userColumns) AliasedAs(alias string) userColumns {
	return buildUserColumns(alias)
}

func buildUserColumns(alias string) userColumns {
	return userColumns{
		tableAlias: alias,
		ID:         psql.Quote(alias, "id"),
		CreateTime: psql.Quote(alias, "create_time"),
		UpdateTime: psql.Quote(alias, "update_time"),
		DeleteTime: psql.Quote(alias, "delete_time"),
		DelState:   psql.Quote(alias, "del_state"),
		Version:    psql.Quote(alias, "version"),
		Nickname:   psql.Quote(alias, "nickname"),
		Info:       psql.Quote(alias, "info"),
		Role:       psql.Quote(alias, "role"),
	}
}

type userWhere[Q psql.Filterable] struct {
	ID         psql.WhereMod[Q, int64]
	CreateTime psql.WhereMod[Q, time.Time]
	UpdateTime psql.WhereMod[Q, time.Time]
	DeleteTime psql.WhereMod[Q, time.Time]
	DelState   psql.WhereMod[Q, int64]
	Version    psql.WhereMod[Q, int64]
	Nickname   psql.WhereMod[Q, string]
	Info       psql.WhereMod[Q, string]
	Role       psql.WhereMod[Q, string]
}

func (userWhere[Q]) AliasedAs(alias string) userWhere[Q] {
	return buildUserWhere[Q](buildUserColumns(alias))
}

func buildUserWhere[Q psql.Filterable](cols userColumns) userWhere[Q] {
	return userWhere[Q]{
		ID:         psql.Where[Q, int64](cols.ID),
		CreateTime: psql.Where[Q, time.Time](cols.CreateTime),
		UpdateTime: psql.Where[Q, time.Time](cols.UpdateTime),
		DeleteTime: psql.Where[Q, time.Time](cols.DeleteTime),
		DelState:   psql.Where[Q, int64](cols.DelState),
		Version:    psql.Where[Q, int64](cols.Version),
		Nickname:   psql.Where[Q, string](cols.Nickname),
		Info:       psql.Where[Q, string](cols.Info),
		Role:       psql.Where[Q, string](cols.Role),
	}
}

var UserErrors = &userErrors{
	ErrUniqueUserPk: &UniqueConstraintError{
		schema:  "",
		table:   "user",
		columns: []string{"id"},
		s:       "user_pk",
	},
}

type userErrors struct {
	ErrUniqueUserPk *UniqueConstraintError
}

// UserSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserSetter struct {
	ID         *int64     `db:"id,pk" `
	CreateTime *time.Time `db:"create_time" `
	UpdateTime *time.Time `db:"update_time" `
	DeleteTime *time.Time `db:"delete_time" `
	DelState   *int64     `db:"del_state" `
	Version    *int64     `db:"version" `
	Nickname   *string    `db:"nickname" `
	Info       *string    `db:"info" `
	Role       *string    `db:"role" `
}

func (s UserSetter) SetColumns() []string {
	vals := make([]string, 0, 9)
	if s.ID != nil {
		vals = append(vals, "id")
	}

	if s.CreateTime != nil {
		vals = append(vals, "create_time")
	}

	if s.UpdateTime != nil {
		vals = append(vals, "update_time")
	}

	if s.DeleteTime != nil {
		vals = append(vals, "delete_time")
	}

	if s.DelState != nil {
		vals = append(vals, "del_state")
	}

	if s.Version != nil {
		vals = append(vals, "version")
	}

	if s.Nickname != nil {
		vals = append(vals, "nickname")
	}

	if s.Info != nil {
		vals = append(vals, "info")
	}

	if s.Role != nil {
		vals = append(vals, "role")
	}

	return vals
}

func (s UserSetter) Overwrite(t *User) {
	if s.ID != nil {
		t.ID = *s.ID
	}
	if s.CreateTime != nil {
		t.CreateTime = *s.CreateTime
	}
	if s.UpdateTime != nil {
		t.UpdateTime = *s.UpdateTime
	}
	if s.DeleteTime != nil {
		t.DeleteTime = *s.DeleteTime
	}
	if s.DelState != nil {
		t.DelState = *s.DelState
	}
	if s.Version != nil {
		t.Version = *s.Version
	}
	if s.Nickname != nil {
		t.Nickname = *s.Nickname
	}
	if s.Info != nil {
		t.Info = *s.Info
	}
	if s.Role != nil {
		t.Role = *s.Role
	}
}

func (s *UserSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Users.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 9)
		if s.ID != nil {
			vals[0] = psql.Arg(*s.ID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.CreateTime != nil {
			vals[1] = psql.Arg(*s.CreateTime)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.UpdateTime != nil {
			vals[2] = psql.Arg(*s.UpdateTime)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.DeleteTime != nil {
			vals[3] = psql.Arg(*s.DeleteTime)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.DelState != nil {
			vals[4] = psql.Arg(*s.DelState)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.Version != nil {
			vals[5] = psql.Arg(*s.Version)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.Nickname != nil {
			vals[6] = psql.Arg(*s.Nickname)
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.Info != nil {
			vals[7] = psql.Arg(*s.Info)
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if s.Role != nil {
			vals[8] = psql.Arg(*s.Role)
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s UserSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s UserSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 9)

	if s.ID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.CreateTime != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "create_time")...),
			psql.Arg(s.CreateTime),
		}})
	}

	if s.UpdateTime != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "update_time")...),
			psql.Arg(s.UpdateTime),
		}})
	}

	if s.DeleteTime != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "delete_time")...),
			psql.Arg(s.DeleteTime),
		}})
	}

	if s.DelState != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "del_state")...),
			psql.Arg(s.DelState),
		}})
	}

	if s.Version != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "version")...),
			psql.Arg(s.Version),
		}})
	}

	if s.Nickname != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "nickname")...),
			psql.Arg(s.Nickname),
		}})
	}

	if s.Info != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "info")...),
			psql.Arg(s.Info),
		}})
	}

	if s.Role != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "role")...),
			psql.Arg(s.Role),
		}})
	}

	return exprs
}

// FindUser retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUser(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*User, error) {
	if len(cols) == 0 {
		return Users.Query(
			SelectWhere.Users.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Users.Query(
		SelectWhere.Users.ID.EQ(IDPK),
		sm.Columns(Users.Columns().Only(cols...)),
	).One(ctx, exec)
}

// UserExists checks the presence of a single record by primary key
func UserExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return Users.Query(
		SelectWhere.Users.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after User is retrieved from the database
func (o *User) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, UserSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the User
func (o *User) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *User) pkEQ() dialect.Expression {
	return psql.Quote("user", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the User
func (o *User) Update(ctx context.Context, exec bob.Executor, s *UserSetter) error {
	v, err := Users.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single User record with an executor
func (o *User) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Users.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the User using the executor
func (o *User) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Users.Query(
		SelectWhere.Users.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after UserSlice is retrieved from the database
func (o UserSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o UserSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("user", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o UserSlice) copyMatchingRows(from ...*User) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o UserSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterUpdateHooks on the slice
				_, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o UserSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterDeleteHooks on the slice
				_, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o UserSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Users.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o UserSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Users.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o UserSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Users.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}
