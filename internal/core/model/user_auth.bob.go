// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// UserAuth is an object representing the database table.
type UserAuth struct {
	ID            int64     `db:"id,pk" `
	CreateTime    time.Time `db:"create_time" `
	UpdateTime    time.Time `db:"update_time" `
	DeleteTime    time.Time `db:"delete_time" `
	DelState      int64     `db:"del_state" `
	Version       int64     `db:"version" `
	UserID        int64     `db:"user_id" `
	AuthType      string    `db:"auth_type" `
	AuthID        string    `db:"auth_id" `
	AuthToken     string    `db:"auth_token" `
	LastLoginTime time.Time `db:"last_login_time" `
}

// UserAuthSlice is an alias for a slice of pointers to UserAuth.
// This should almost always be used instead of []*UserAuth.
type UserAuthSlice []*UserAuth

// UserAuths contains methods to work with the user_auth table
var UserAuths = psql.NewTablex[*UserAuth, UserAuthSlice, *UserAuthSetter]("", "user_auth")

// UserAuthsQuery is a query on the user_auth table
type UserAuthsQuery = *psql.ViewQuery[*UserAuth, UserAuthSlice]

type userAuthColumnNames struct {
	ID            string
	CreateTime    string
	UpdateTime    string
	DeleteTime    string
	DelState      string
	Version       string
	UserID        string
	AuthType      string
	AuthID        string
	AuthToken     string
	LastLoginTime string
}

var UserAuthColumns = buildUserAuthColumns("user_auth")

type userAuthColumns struct {
	tableAlias    string
	ID            psql.Expression
	CreateTime    psql.Expression
	UpdateTime    psql.Expression
	DeleteTime    psql.Expression
	DelState      psql.Expression
	Version       psql.Expression
	UserID        psql.Expression
	AuthType      psql.Expression
	AuthID        psql.Expression
	AuthToken     psql.Expression
	LastLoginTime psql.Expression
}

func (c userAuthColumns) Alias() string {
	return c.tableAlias
}

func (userAuthColumns) AliasedAs(alias string) userAuthColumns {
	return buildUserAuthColumns(alias)
}

func buildUserAuthColumns(alias string) userAuthColumns {
	return userAuthColumns{
		tableAlias:    alias,
		ID:            psql.Quote(alias, "id"),
		CreateTime:    psql.Quote(alias, "create_time"),
		UpdateTime:    psql.Quote(alias, "update_time"),
		DeleteTime:    psql.Quote(alias, "delete_time"),
		DelState:      psql.Quote(alias, "del_state"),
		Version:       psql.Quote(alias, "version"),
		UserID:        psql.Quote(alias, "user_id"),
		AuthType:      psql.Quote(alias, "auth_type"),
		AuthID:        psql.Quote(alias, "auth_id"),
		AuthToken:     psql.Quote(alias, "auth_token"),
		LastLoginTime: psql.Quote(alias, "last_login_time"),
	}
}

type userAuthWhere[Q psql.Filterable] struct {
	ID            psql.WhereMod[Q, int64]
	CreateTime    psql.WhereMod[Q, time.Time]
	UpdateTime    psql.WhereMod[Q, time.Time]
	DeleteTime    psql.WhereMod[Q, time.Time]
	DelState      psql.WhereMod[Q, int64]
	Version       psql.WhereMod[Q, int64]
	UserID        psql.WhereMod[Q, int64]
	AuthType      psql.WhereMod[Q, string]
	AuthID        psql.WhereMod[Q, string]
	AuthToken     psql.WhereMod[Q, string]
	LastLoginTime psql.WhereMod[Q, time.Time]
}

func (userAuthWhere[Q]) AliasedAs(alias string) userAuthWhere[Q] {
	return buildUserAuthWhere[Q](buildUserAuthColumns(alias))
}

func buildUserAuthWhere[Q psql.Filterable](cols userAuthColumns) userAuthWhere[Q] {
	return userAuthWhere[Q]{
		ID:            psql.Where[Q, int64](cols.ID),
		CreateTime:    psql.Where[Q, time.Time](cols.CreateTime),
		UpdateTime:    psql.Where[Q, time.Time](cols.UpdateTime),
		DeleteTime:    psql.Where[Q, time.Time](cols.DeleteTime),
		DelState:      psql.Where[Q, int64](cols.DelState),
		Version:       psql.Where[Q, int64](cols.Version),
		UserID:        psql.Where[Q, int64](cols.UserID),
		AuthType:      psql.Where[Q, string](cols.AuthType),
		AuthID:        psql.Where[Q, string](cols.AuthID),
		AuthToken:     psql.Where[Q, string](cols.AuthToken),
		LastLoginTime: psql.Where[Q, time.Time](cols.LastLoginTime),
	}
}

var UserAuthErrors = &userAuthErrors{
	ErrUniqueUserAuthPk: &UniqueConstraintError{
		schema:  "",
		table:   "user_auth",
		columns: []string{"id"},
		s:       "user_auth_pk",
	},
}

type userAuthErrors struct {
	ErrUniqueUserAuthPk *UniqueConstraintError
}

// UserAuthSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserAuthSetter struct {
	ID            *int64     `db:"id,pk" `
	CreateTime    *time.Time `db:"create_time" `
	UpdateTime    *time.Time `db:"update_time" `
	DeleteTime    *time.Time `db:"delete_time" `
	DelState      *int64     `db:"del_state" `
	Version       *int64     `db:"version" `
	UserID        *int64     `db:"user_id" `
	AuthType      *string    `db:"auth_type" `
	AuthID        *string    `db:"auth_id" `
	AuthToken     *string    `db:"auth_token" `
	LastLoginTime *time.Time `db:"last_login_time" `
}

func (s UserAuthSetter) SetColumns() []string {
	vals := make([]string, 0, 11)
	if s.ID != nil {
		vals = append(vals, "id")
	}

	if s.CreateTime != nil {
		vals = append(vals, "create_time")
	}

	if s.UpdateTime != nil {
		vals = append(vals, "update_time")
	}

	if s.DeleteTime != nil {
		vals = append(vals, "delete_time")
	}

	if s.DelState != nil {
		vals = append(vals, "del_state")
	}

	if s.Version != nil {
		vals = append(vals, "version")
	}

	if s.UserID != nil {
		vals = append(vals, "user_id")
	}

	if s.AuthType != nil {
		vals = append(vals, "auth_type")
	}

	if s.AuthID != nil {
		vals = append(vals, "auth_id")
	}

	if s.AuthToken != nil {
		vals = append(vals, "auth_token")
	}

	if s.LastLoginTime != nil {
		vals = append(vals, "last_login_time")
	}

	return vals
}

func (s UserAuthSetter) Overwrite(t *UserAuth) {
	if s.ID != nil {
		t.ID = *s.ID
	}
	if s.CreateTime != nil {
		t.CreateTime = *s.CreateTime
	}
	if s.UpdateTime != nil {
		t.UpdateTime = *s.UpdateTime
	}
	if s.DeleteTime != nil {
		t.DeleteTime = *s.DeleteTime
	}
	if s.DelState != nil {
		t.DelState = *s.DelState
	}
	if s.Version != nil {
		t.Version = *s.Version
	}
	if s.UserID != nil {
		t.UserID = *s.UserID
	}
	if s.AuthType != nil {
		t.AuthType = *s.AuthType
	}
	if s.AuthID != nil {
		t.AuthID = *s.AuthID
	}
	if s.AuthToken != nil {
		t.AuthToken = *s.AuthToken
	}
	if s.LastLoginTime != nil {
		t.LastLoginTime = *s.LastLoginTime
	}
}

func (s *UserAuthSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return UserAuths.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 11)
		if s.ID != nil {
			vals[0] = psql.Arg(*s.ID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.CreateTime != nil {
			vals[1] = psql.Arg(*s.CreateTime)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.UpdateTime != nil {
			vals[2] = psql.Arg(*s.UpdateTime)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.DeleteTime != nil {
			vals[3] = psql.Arg(*s.DeleteTime)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.DelState != nil {
			vals[4] = psql.Arg(*s.DelState)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.Version != nil {
			vals[5] = psql.Arg(*s.Version)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.UserID != nil {
			vals[6] = psql.Arg(*s.UserID)
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.AuthType != nil {
			vals[7] = psql.Arg(*s.AuthType)
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if s.AuthID != nil {
			vals[8] = psql.Arg(*s.AuthID)
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if s.AuthToken != nil {
			vals[9] = psql.Arg(*s.AuthToken)
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		if s.LastLoginTime != nil {
			vals[10] = psql.Arg(*s.LastLoginTime)
		} else {
			vals[10] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s UserAuthSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s UserAuthSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 11)

	if s.ID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.CreateTime != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "create_time")...),
			psql.Arg(s.CreateTime),
		}})
	}

	if s.UpdateTime != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "update_time")...),
			psql.Arg(s.UpdateTime),
		}})
	}

	if s.DeleteTime != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "delete_time")...),
			psql.Arg(s.DeleteTime),
		}})
	}

	if s.DelState != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "del_state")...),
			psql.Arg(s.DelState),
		}})
	}

	if s.Version != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "version")...),
			psql.Arg(s.Version),
		}})
	}

	if s.UserID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if s.AuthType != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "auth_type")...),
			psql.Arg(s.AuthType),
		}})
	}

	if s.AuthID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "auth_id")...),
			psql.Arg(s.AuthID),
		}})
	}

	if s.AuthToken != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "auth_token")...),
			psql.Arg(s.AuthToken),
		}})
	}

	if s.LastLoginTime != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_login_time")...),
			psql.Arg(s.LastLoginTime),
		}})
	}

	return exprs
}

// FindUserAuth retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUserAuth(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*UserAuth, error) {
	if len(cols) == 0 {
		return UserAuths.Query(
			SelectWhere.UserAuths.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return UserAuths.Query(
		SelectWhere.UserAuths.ID.EQ(IDPK),
		sm.Columns(UserAuths.Columns().Only(cols...)),
	).One(ctx, exec)
}

// UserAuthExists checks the presence of a single record by primary key
func UserAuthExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return UserAuths.Query(
		SelectWhere.UserAuths.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after UserAuth is retrieved from the database
func (o *UserAuth) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = UserAuths.AfterSelectHooks.RunHooks(ctx, exec, UserAuthSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = UserAuths.AfterInsertHooks.RunHooks(ctx, exec, UserAuthSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = UserAuths.AfterUpdateHooks.RunHooks(ctx, exec, UserAuthSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = UserAuths.AfterDeleteHooks.RunHooks(ctx, exec, UserAuthSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the UserAuth
func (o *UserAuth) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *UserAuth) pkEQ() dialect.Expression {
	return psql.Quote("user_auth", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the UserAuth
func (o *UserAuth) Update(ctx context.Context, exec bob.Executor, s *UserAuthSetter) error {
	v, err := UserAuths.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single UserAuth record with an executor
func (o *UserAuth) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := UserAuths.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the UserAuth using the executor
func (o *UserAuth) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := UserAuths.Query(
		SelectWhere.UserAuths.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after UserAuthSlice is retrieved from the database
func (o UserAuthSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = UserAuths.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = UserAuths.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = UserAuths.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = UserAuths.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o UserAuthSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("user_auth", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o UserAuthSlice) copyMatchingRows(from ...*UserAuth) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o UserAuthSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return UserAuths.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *UserAuth:
				o.copyMatchingRows(retrieved)
			case []*UserAuth:
				o.copyMatchingRows(retrieved...)
			case UserAuthSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a UserAuth or a slice of UserAuth
				// then run the AfterUpdateHooks on the slice
				_, err = UserAuths.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o UserAuthSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return UserAuths.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *UserAuth:
				o.copyMatchingRows(retrieved)
			case []*UserAuth:
				o.copyMatchingRows(retrieved...)
			case UserAuthSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a UserAuth or a slice of UserAuth
				// then run the AfterDeleteHooks on the slice
				_, err = UserAuths.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o UserAuthSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserAuthSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := UserAuths.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o UserAuthSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := UserAuths.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o UserAuthSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := UserAuths.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}
